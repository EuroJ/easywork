import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class FirebaseSetupService {
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á users ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  static Future<void> setupCompleteProject() async {
    print('üöÄ Starting Firebase project setup...');
    
    try {
      // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á users
      final users = await _createAllUsers();
      print('‚úÖ Created ${users.length} users');
      
      // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á demo tasks
      await _createDemoTasks(users);
      print('‚úÖ Created demo tasks');
      
      print('üéâ Firebase project setup completed!');
      print('üí° You can now login with:');
      print('   - admin@easywork.com / admin123');
      print('   - john@easywork.com / user123');
      print('   - mary@easywork.com / user123');
      print('   - demo@easywork.com / demo123');
      
    } catch (e) {
      print('‚ùå Setup failed: $e');
    }
  }

  static Future<List<String>> _createAllUsers() async {
    final usersData = [
      {
        'email': 'admin@easywork.com',
        'password': 'admin123',
        'firstName': '‡∫ó‡ªâ‡∫≤‡∫ß',
        'lastName': '‡ªÅ‡∫≠‡∫î‡∫°‡∫¥‡∫ô',
        'role': 'admin',
      },
      {
        'email': 'john@easywork.com',
        'password': 'user123',
        'firstName': '‡∫ó‡ªâ‡∫≤‡∫ß',
        'lastName': '‡∫à‡∫≠‡∫ô',
        'role': 'employee',
      },
      {
        'email': 'mary@easywork.com',
        'password': 'user123',
        'firstName': '‡∫ô‡∫≤‡∫á',
        'lastName': '‡ªÅ‡∫°‡∫£‡∫µ',
        'role': 'employee',
      },
      {
        'email': 'demo@easywork.com',
        'password': 'demo123',
        'firstName': 'Demo',
        'lastName': 'User',
        'role': 'employee',
      },
    ];

    List<String> userIds = [];

    for (var userData in usersData) {
      try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏ô Authentication
        final userCredential = await _auth.createUserWithEmailAndPassword(
          email: userData['email']!,
          password: userData['password']!,
        );

        if (userCredential.user != null) {
          final uid = userCredential.user!.uid;
          userIds.add(uid);

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore
          await _firestore.collection('users').doc(uid).set({
            'uid': uid,
            'email': userData['email'],
            'firstName': userData['firstName'],
            'lastName': userData['lastName'],
            'role': userData['role'],
            'createdAt': FieldValue.serverTimestamp(),
            'lastLoginAt': FieldValue.serverTimestamp(),
            'isActive': true,
            'profileImageUrl': null,
          });

          print('‚úÖ Created user: ${userData['email']}');
        }
      } catch (e) {
        print('‚ùå Failed to create ${userData['email']}: $e');
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏•‡∏≠‡∏á‡∏´‡∏≤ UID
        try {
          final existingUsers = await _firestore
              .collection('users')
              .where('email', isEqualTo: userData['email'])
              .get();
          
          if (existingUsers.docs.isNotEmpty) {
            userIds.add(existingUsers.docs.first.id);
            print('üìå User ${userData['email']} already exists');
          }
        } catch (e2) {
          print('‚ùå Could not find existing user: $e2');
        }
      }
    }

    return userIds;
  }

  static Future<void> _createDemoTasks(List<String> userIds) async {
    if (userIds.length < 3) {
      print('‚ö†Ô∏è Need at least 3 users to create demo tasks');
      return;
    }

    final adminId = userIds[0]; // Admin
    final johnId = userIds[1];  // John
    final maryId = userIds[2];  // Mary

    final demoTasks = [
      {
        'id': 'task-001',
        'title': '‡∫≠‡∫±‡∫ö‡ªÄ‡∫î‡∫î‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô',
        'description': '‡∫õ‡∫±‡∫ö‡∫õ‡∫∏‡∫á‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫à‡∫±‡∫î‡∫Å‡∫≤‡∫ô‡∫á‡∫≤‡∫ô‡ªÉ‡∫´‡ªâ‡∫ó‡∫±‡∫ô‡∫™‡∫∞‡ªÑ‡ªù ‡ªÅ‡∫•‡∫∞ ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ü‡∫µ‡ªÄ‡∫à‡∫µ‡ªÉ‡ªù‡ªà',
        'createdBy': adminId,
        'assignedTo': johnId,
        'status': 1, // inProgress
        'priority': 2, // high
        'category': 'Development',
        'daysFromNow': 7,
        'progress': 45.0,
      },
      {
        'id': 'task-002',
        'title': '‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫õ‡∫∞‡∫à‡ªç‡∫≤‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô',
        'description': '‡∫à‡∫±‡∫î‡∫ó‡ªç‡∫≤‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫™‡∫∞‡∫´‡∫º‡∫∏‡∫ö‡∫ú‡∫ª‡∫ô‡∫á‡∫≤‡∫ô‡∫õ‡∫∞‡∫à‡ªç‡∫≤‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô',
        'createdBy': adminId,
        'assignedTo': maryId,
        'status': 0, // pending
        'priority': 1, // medium
        'category': 'Report',
        'daysFromNow': 3,
        'progress': 0.0,
      },
      {
        'id': 'task-003',
        'title': '‡∫õ‡∫±‡∫ö‡∫õ‡∫∏‡∫á UI ‡ªÉ‡ªù‡ªà',
        'description': '‡∫≠‡∫≠‡∫Å‡ªÅ‡∫ö‡∫ö UI ‡ªÉ‡ªù‡ªà‡ªÉ‡∫´‡ªâ‡∫™‡∫ß‡∫ç‡∫á‡∫≤‡∫° ‡ªÅ‡∫•‡∫∞ ‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô‡∫á‡ªà‡∫≤‡∫ç',
        'createdBy': adminId,
        'assignedTo': johnId,
        'status': 2, // completed
        'priority': 1, // medium
        'category': 'Design',
        'daysFromNow': -2, // overdue
        'progress': 100.0,
      },
    ];

    for (var taskData in demoTasks) {
      final dueDate = DateTime.now().add(Duration(days: taskData['daysFromNow'] as int));
      
      await _firestore.collection('tasks').doc(taskData['id'] as String).set({
        'id': taskData['id'],
        'title': taskData['title'],
        'description': taskData['description'],
        'createdBy': taskData['createdBy'],
        'assignedTo': taskData['assignedTo'],
        'status': taskData['status'],
        'priority': taskData['priority'],
        'category': taskData['category'],
        'createdAt': FieldValue.serverTimestamp(),
        'dueDate': dueDate.millisecondsSinceEpoch,
        'completedAt': taskData['status'] == 2 ? DateTime.now().millisecondsSinceEpoch : null,
        'attachments': [],
        'comments': [],
        'progress': taskData['progress'],
      });
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  static Future<void> checkProjectData() async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö users
      final usersSnapshot = await _firestore.collection('users').get();
      print('üë• Users in Firestore: ${usersSnapshot.docs.length}');
      
      for (var doc in usersSnapshot.docs) {
        final data = doc.data();
        print('   - ${data['email']} (${data['role']})');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tasks
      final tasksSnapshot = await _firestore.collection('tasks').get();
      print('üìã Tasks in Firestore: ${tasksSnapshot.docs.length}');
      
      for (var doc in tasksSnapshot.docs) {
        final data = doc.data();
        print('   - ${data['title']}');
      }

    } catch (e) {
      print('‚ùå Error checking data: $e');
    }
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reset)
  static Future<void> resetProject() async {
    try {
      // ‡∏•‡∏ö tasks
      final tasksSnapshot = await _firestore.collection('tasks').get();
      for (var doc in tasksSnapshot.docs) {
        await doc.reference.delete();
      }

      // ‡∏•‡∏ö users ‡∏à‡∏≤‡∏Å Firestore
      final usersSnapshot = await _firestore.collection('users').get();
      for (var doc in usersSnapshot.docs) {
        await doc.reference.delete();
      }

      print('‚úÖ Project data reset complete');
      print('‚ö†Ô∏è You need to manually delete users from Authentication console');
      
    } catch (e) {
      print('‚ùå Reset failed: $e');
    }
  }
}